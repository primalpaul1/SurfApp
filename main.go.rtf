{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 package main\
\
import (\
	"encoding/json"\
	"fmt"\
	"log"\
	"net/http"\
	"os"\
	"time"\
\
	"github.com/mhelmetag/surflinef"\
)\
\
type ForecastResponse struct \{\
	SpotID         string `json:"spotId"`\
	Location       string `json:"location"`\
	WaveHeight     string `json:"waveHeight"` // Now formatted as "4.2 ft at 16 seconds 207 degrees"\
	WindSpeed      string `json:"windSpeed"`\
	WindDirection  string `json:"windDirection"`\
	Tide           string `json:"tide"`\
	Timestamp      int64  `json:"timestamp"`\
\}\
\
// Map of Surfline spot IDs to location names\
var spotLocations = map[string]string\{\
	"5842041f4e65fad6a7708814": "Malibu, CA",\
	"5842041f4e65fad6a770883d": "Huntington Beach, CA",\
	"5842041f4e65fad6a7709115": "Tamarindo, CR",\
	"5842041f4e65fad6a7709117": "Jaco, CR",\
	"5842041f4e65fad6a7709116": "Dominical, CR",\
\}\
\
func main() \{\
	port := os.Getenv("PORT")\
	if port == "" \{\
		port = "8080"\
	\}\
\
	http.HandleFunc("/forecast", handleForecast)\
	\
	log.Printf("Starting server on port %s", port)\
	if err := http.ListenAndServe(":"+port, nil); err != nil \{\
		log.Fatal(err)\
	\}\
\}\
\
func handleForecast(w http.ResponseWriter, r *http.Request) \{\
	w.Header().Set("Content-Type", "application/json")\
	\
	spotID := r.URL.Query().Get("spotId")\
	if spotID == "" \{\
		http.Error(w, "Missing spotId parameter", http.StatusBadRequest)\
		return\
	\}\
	\
	// Create a new Surfline client\
	client := surflinef.NewClient()\
	\
	// Get the forecast for the spot\
	forecast, err := client.GetForecast(spotID, "en")\
	if err != nil \{\
		log.Printf("Error getting forecast: %v", err)\
		http.Error(w, "Error fetching forecast data", http.StatusInternalServerError)\
		return\
	\}\
	\
	// Get tide data\
	tide, err := client.GetTides(spotID, "en")\
	if err != nil \{\
		log.Printf("Error getting tides: %v", err)\
		// Continue without tide data\
	\}\
	\
	// Format the response\
	response := formatForecastResponse(spotID, forecast, tide)\
	\
	// Return the response\
	json.NewEncoder(w).Encode(response)\
\}\
\
func formatForecastResponse(spotID string, forecast *surflinef.Forecast, tide *surflinef.Tide) ForecastResponse \{\
	// Get the location name\
	location, ok := spotLocations[spotID]\
	if !ok \{\
		location = "Unknown Location"\
	\}\
	\
	// Format wave height with swell period and direction in one string\
	waveHeight := "Unknown"\
	if len(forecast.Data.Wave) > 0 && len(forecast.Data.Wave[0].Surf.Min) > 0 && len(forecast.Data.Wave[0].Swell) > 0 \{\
		height := (forecast.Data.Wave[0].Surf.Min[0] + forecast.Data.Wave[0].Surf.Max[0]) / 2\
		period := forecast.Data.Wave[0].Swell[0].Period[0]\
		direction := forecast.Data.Wave[0].Swell[0].Direction[0]\
		\
		// Format as "4.2 ft at 16 seconds 207 degrees"\
		waveHeight = fmt.Sprintf("%.1f ft at %.0f seconds %.0f degrees", height, period, direction)\
	\}\
	\
	// Format wind\
	windSpeed := "Unknown"\
	windDirection := "Unknown"\
	if len(forecast.Data.Wind) > 0 \{\
		speed := forecast.Data.Wind[0].Speed[0]\
		direction := forecast.Data.Wind[0].Direction[0]\
		windSpeed = fmt.Sprintf("%.1f mph", speed)\
		\
		// Convert direction to text (simplified)\
		if direction > 337.5 || direction <= 22.5 \{\
			windDirection = "Offshore" // Assuming shore is to the west\
		\} else if direction > 157.5 && direction <= 202.5 \{\
			windDirection = "Onshore" // Assuming shore is to the west\
		\} else \{\
			windDirection = "Cross-shore"\
		\}\
	\}\
	\
	// Format tide\
	tideInfo := "Unknown"\
	if tide != nil && len(tide.Data.Tides) > 0 \{\
		// Find the next tide event\
		now := time.Now().Unix()\
		nextTide := tide.Data.Tides[0]\
		for _, t := range tide.Data.Tides \{\
			if t.Timestamp > now \{\
				nextTide = t\
				break\
			\}\
		\}\
		\
		tideType := "Unknown"\
		if nextTide.Type == "HIGH" \{\
			tideType = "High"\
		\} else if nextTide.Type == "LOW" \{\
			tideType = "Low"\
		\}\
		\
		tideTime := time.Unix(nextTide.Timestamp, 0).Format("3:04pm")\
		tideInfo = fmt.Sprintf("%s, %.1fft at %s", tideType, nextTide.Height, tideTime)\
	\}\
	\
	return ForecastResponse\{\
		SpotID:         spotID,\
		Location:       location,\
		WaveHeight:     waveHeight,\
		WindSpeed:      windSpeed,\
		WindDirection:  windDirection,\
		Tide:           tideInfo,\
		Timestamp:      time.Now().Unix(),\
	\}\
\}\
}